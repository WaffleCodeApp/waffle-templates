{
 "Conditions": {
  "ALARMS_ENABLED": {
   "Fn::Equals": [
    {
     "Ref": "AlarmsEnabled"
    },
    "True"
   ]
  },
  "ALT_CERTIFICATE_ARN": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      {
       "Ref": "AltCertificateArn"
      },
      ""
     ]
    }
   ]
  },
  "ALT_FULL_DOMAIN_NAME_SPECIFIED": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      {
       "Ref": "AltFullDomainName"
      },
      ""
     ]
    }
   ]
  },
  "CUSTOM_API_HOST": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      {
       "Ref": "ApiHost"
      },
      ""
     ]
    }
   ]
  },
  "CUSTOM_API_PROTOCOL": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      {
       "Ref": "ApiProtocol"
      },
      ""
     ]
    }
   ]
  },
  "CUSTOM_API_STAGE": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      {
       "Ref": "ApiStage"
      },
      ""
     ]
    }
   ]
  },
  "CUSTOM_AUTH_WEB_CLIENT": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      {
       "Ref": "AuthUserPoolClientWebRef"
      },
      ""
     ]
    }
   ]
  },
  "CUSTOM_IDENTITY_POOL_REF": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      {
       "Ref": "AuthIdentityPoolRef"
      },
      ""
     ]
    }
   ]
  },
  "CUSTOM_USER_POOL_REF": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      {
       "Ref": "AuthUserPoolRef"
      },
      ""
     ]
    }
   ]
  },
  "MANUAL_APPROVAL_SELECTED": {
   "Fn::Equals": [
    {
     "Ref": "CICDManualApproval"
    },
    "True"
   ]
  }
 },
 "Outputs": {
  "StackExists": {
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       "Waffle-cdn-cicd-",
       {
        "Ref": "DeploymentId"
       },
       "-",
       {
        "Ref": "PipelineId"
       }
      ]
     ]
    }
   },
   "Value": "True"
  }
 },
 "Parameters": {
  "AlarmsEnabled": {
   "AllowedValues": [
    "True",
    "False"
   ],
   "Default": "True",
   "Description": "(optional) If system alarms should be set up.",
   "Type": "String"
  },
  "AltCertificateArn": {
   "Default": "",
   "Description": "(optional) For the cert for the somethingelse.com",
   "Type": "String"
  },
  "AltFullDomainName": {
   "Default": "",
   "Description": "(optional) Like somethingelse.com, where the frontend is also to be found",
   "Type": "String"
  },
  "ApiHost": {
   "Default": "",
   "Description": "(optional) Hostname of the Api Gateway",
   "Type": "String"
  },
  "ApiProtocol": {
   "Default": "",
   "Description": "(optional) https://",
   "Type": "String"
  },
  "ApiStage": {
   "Default": "",
   "Description": "(optional) Api Gateway stage path: /Prod",
   "Type": "String"
  },
  "AuthIdentityPoolRef": {
   "Default": "",
   "Description": "(optional) The REF of the user pool",
   "Type": "String"
  },
  "AuthUserPoolClientWebRef": {
   "Default": "",
   "Description": "(optional) The REF of the user pool web client",
   "Type": "String"
  },
  "AuthUserPoolRef": {
   "Default": "",
   "Description": "(optional) The REF of the user pool",
   "Type": "String"
  },
  "BuildEnvVarsJson": {
   "Default": "{}",
   "Description": "(optional) A JSON that will be used as env var during build. ",
   "Type": "String"
  },
  "BuildspecPath": {
   "Description": "Path with filename to the buildspec.yml for CodeBuild",
   "Type": "String"
  },
  "CICDManualApproval": {
   "AllowedValues": [
    "True",
    "False"
   ],
   "Default": "True",
   "Description": "Is manual approval required before deployment?",
   "Type": "String"
  },
  "CommitID": {
   "Default": "",
   "Description": "(optional) GitHub commit ID of that has to be built. If unspecified it always automatically builds the latest.",
   "Type": "String"
  },
  "DeploymentId": {
   "Description": "deployment_id",
   "Type": "String"
  },
  "FullDomainName": {
   "Description": "like dev.wafflecode.app",
   "Type": "String"
  },
  "GenericCertificateArn": {
   "Description": "For the cert for the *.fulldomain",
   "Type": "String"
  },
  "GitBranch": {
   "Default": "main",
   "Description": "Git branch name to be deployed",
   "Type": "String"
  },
  "GitConnectionArn": {
   "Description": "CodeStar connection ARN",
   "Type": "String"
  },
  "GitRepositoryId": {
   "Description": "some-user/my-repo",
   "Type": "String"
  },
  "LogRetentionDays": {
   "Default": "365",
   "Description": "(optional) Days how long logs to be retained.",
   "Type": "String"
  },
  "PipelineId": {
   "Description": "pipeline_id",
   "Type": "String"
  },
  "WebHostname": {
   "Default": "www",
   "Description": "Like the 'www' from 'www.dev.wafflecode.app'.",
   "Type": "String"
  }
 },
 "Resources": {
  "ArtifactsBucket": {
   "DeletionPolicy": "Retain",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    }
   },
   "Type": "AWS::S3::Bucket"
  },
  "CiCdArtifactsBucketPolicy": {
   "Properties": {
    "Bucket": {
     "Ref": "ArtifactsBucket"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject",
        "s3:GetObjectVersion",
        "s3:GetBucketVersioning"
       ],
       "Condition": {
        "Bool": {
         "aws:SecureTransport": false
        }
       },
       "Effect": "Allow",
       "Principal": {
        "AWS": [
         {
          "Fn::GetAtt": [
           "CodePipelineServiceRole",
           "Arn"
          ]
         },
         {
          "Fn::GetAtt": [
           "CodePipelineServiceRole",
           "Arn"
          ]
         }
        ]
       },
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:s3:::",
           {
            "Ref": "ArtifactsBucket"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:s3:::",
           {
            "Ref": "ArtifactsBucket"
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:PutObject",
       "Effect": "Allow",
       "Principal": {
        "AWS": [
         {
          "Fn::GetAtt": [
           "CodePipelineServiceRole",
           "Arn"
          ]
         },
         {
          "Fn::GetAtt": [
           "CodeBuildServiceRole",
           "Arn"
          ]
         }
        ]
       },
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:s3:::",
           {
            "Ref": "ArtifactsBucket"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:s3:::",
           {
            "Ref": "ArtifactsBucket"
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Type": "AWS::S3::BucketPolicy"
  },
  "CodeBuildServiceRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "codebuild.amazonaws.com"
        ]
       }
      }
     ]
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "codebuild:*"
         ],
         "Effect": "Allow",
         "Resource": "*"
        },
        {
         "Action": [
          "logs:CreateLogStream",
          "logs:FilterLogEvents",
          "logs:GetLogEvents",
          "logs:PutLogEvents",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:PutRetentionPolicy",
          "logs:PutMetricFilter",
          "logs:CreateLogGroup"
         ],
         "Effect": "Allow",
         "Resource": "*"
        },
        {
         "Action": [
          "s3:CreateBucket",
          "s3:GetObject",
          "s3:List*",
          "s3:PutObject"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "ArtifactsBucket"
             }
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "ArtifactsBucket"
             },
             "/*"
            ]
           ]
          }
         ]
        },
        {
         "Action": [
          "iam:PassRole"
         ],
         "Effect": "Allow",
         "Resource": "*"
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": {
       "Fn::Join": [
        "",
        [
         "Waffle-CodeBuildService-",
         {
          "Ref": "DeploymentId"
         },
         "-",
         {
          "Ref": "PipelineId"
         }
        ]
       ]
      }
     }
    ],
    "RoleName": {
     "Fn::Join": [
      "",
      [
       "Waffle-",
       {
        "Ref": "DeploymentId"
       },
       "-",
       {
        "Ref": "PipelineId"
       },
       "-CodeBuildRole"
      ]
     ]
    }
   },
   "Type": "AWS::IAM::Role"
  },
  "CodePipelineExecutionNotificationRule": {
   "Condition": "ALARMS_ENABLED",
   "DependsOn": [
    "Pipeline"
   ],
   "Properties": {
    "DetailType": "FULL",
    "EventTypeIds": [
     "codepipeline-pipeline-pipeline-execution-canceled",
     "codepipeline-pipeline-pipeline-execution-failed",
     "codepipeline-pipeline-pipeline-execution-resumed",
     "codepipeline-pipeline-pipeline-execution-started",
     "codepipeline-pipeline-pipeline-execution-succeeded"
    ],
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "DeploymentId"
       },
       "-",
       {
        "Ref": "PipelineId"
       },
       "-CodePipelineExecution"
      ]
     ]
    },
    "Resource": {
     "Fn::Sub": "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}"
    },
    "Targets": [
     {
      "TargetAddress": {
       "Fn::ImportValue": {
        "Fn::Join": [
         "",
         [
          {
           "Ref": "DeploymentId"
          },
          "-AlertsSnsTopicRef"
         ]
        ]
       }
      },
      "TargetType": "SNS"
     }
    ]
   },
   "Type": "AWS::CodeStarNotifications::NotificationRule"
  },
  "CodePipelineServiceRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "codepipeline.amazonaws.com"
        ]
       }
      }
     ]
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:GetBucketVersioning*",
          "s3:PutObject"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "ArtifactsBucket"
             }
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "ArtifactsBucket"
             },
             "/*"
            ]
           ]
          },
          {
           "Fn::GetAtt": [
            "WebBucket",
            "Arn"
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "WebBucket",
               "Arn"
              ]
             },
             "/*"
            ]
           ]
          }
         ]
        },
        {
         "Action": [
          "codebuild:StartBuild",
          "codebuild:BatchGetBuilds"
         ],
         "Effect": "Allow",
         "Resource": "*"
        },
        {
         "Action": [
          "cloudwatch:*",
          "sns:*"
         ],
         "Effect": "Allow",
         "Resource": "*"
        },
        {
         "Action": [
          "iam:PassRole"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "CodeBuildServiceRole",
            "Arn"
           ]
          }
         ]
        },
        {
         "Action": [
          "codestar-connections:UseConnection"
         ],
         "Effect": "Allow",
         "Resource": {
          "Ref": "GitConnectionArn"
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": {
       "Fn::Join": [
        "",
        [
         "Waffle-CodePipelineService-",
         {
          "Ref": "DeploymentId"
         },
         "-",
         {
          "Ref": "PipelineId"
         }
        ]
       ]
      }
     }
    ],
    "RoleName": {
     "Fn::Join": [
      "",
      [
       "Waffle-",
       {
        "Ref": "DeploymentId"
       },
       "-",
       {
        "Ref": "PipelineId"
       },
       "-CodePipelineRole"
      ]
     ]
    }
   },
   "Type": "AWS::IAM::Role"
  },
  "FrontendDistribution": {
   "Properties": {
    "DistributionConfig": {
     "Aliases": [
      {
       "Fn::If": [
        "ALT_FULL_DOMAIN_NAME_SPECIFIED",
        {
         "Ref": "AltFullDomainName"
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Ref": "WebHostname"
           },
           ".",
           {
            "Ref": "FullDomainName"
           }
          ]
         ]
        }
       ]
      }
     ],
     "DefaultCacheBehavior": {
      "ForwardedValues": {
       "QueryString": true
      },
      "TargetOriginId": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "DeploymentId"
         },
         "-",
         {
          "Ref": "PipelineId"
         },
         "-ui-origin"
        ]
       ]
      },
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "DefaultRootObject": "index.html",
     "Enabled": true,
     "HttpVersion": "http2",
     "Logging": {
      "Bucket": {
       "Fn::GetAtt": [
        "LoggingBucket",
        "DomainName"
       ]
      }
     },
     "Origins": [
      {
       "CustomOriginConfig": {
        "OriginProtocolPolicy": "http-only"
       },
       "DomainName": {
        "Fn::Join": [
         "",
         [
          {
           "Ref": "WebBucket"
          },
          ".s3-website.",
          {
           "Ref": "AWS::Region"
          },
          ".amazonaws.com"
         ]
        ]
       },
       "Id": {
        "Fn::Join": [
         "",
         [
          {
           "Ref": "DeploymentId"
          },
          "-",
          {
           "Ref": "PipelineId"
          },
          "-ui-origin"
         ]
        ]
       }
      }
     ],
     "ViewerCertificate": {
      "AcmCertificateArn": {
       "Fn::If": [
        "ALT_FULL_DOMAIN_NAME_SPECIFIED",
        {
         "Ref": "AltCertificateArn"
        },
        {
         "Ref": "GenericCertificateArn"
        }
       ]
      },
      "MinimumProtocolVersion": "TLSv1.2_2018",
      "SslSupportMethod": "sni-only"
     }
    }
   },
   "Type": "AWS::CloudFront::Distribution"
  },
  "FrontendRecordSet": {
   "Properties": {
    "AliasTarget": {
     "DNSName": {
      "Fn::GetAtt": [
       "FrontendDistribution",
       "DomainName"
      ]
     },
     "HostedZoneId": "Z2FDTNDATAQYW2"
    },
    "Comment": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "DeploymentId"
       },
       "-",
       {
        "Ref": "PipelineId"
       }
      ]
     ]
    },
    "HostedZoneName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "FullDomainName"
       },
       "."
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "WebHostname"
       },
       ".",
       {
        "Ref": "FullDomainName"
       },
       "."
      ]
     ]
    },
    "Type": "A"
   },
   "Type": "AWS::Route53::RecordSet"
  },
  "LoggingBucket": {
   "DeletionPolicy": "Retain",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "OwnershipControls": {
     "Rules": [
      {
       "ObjectOwnership": "BucketOwnerPreferred"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "Type": "AWS::S3::Bucket"
  },
  "Pipeline": {
   "DependsOn": [
    "Project"
   ],
   "Properties": {
    "ArtifactStore": {
     "Location": {
      "Ref": "ArtifactsBucket"
     },
     "Type": "S3"
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "DeploymentId"
       },
       "-",
       {
        "Ref": "PipelineId"
       }
      ]
     ]
    },
    "PipelineType": "V2",
    "RestartExecutionOnUpdate": true,
    "RoleArn": {
     "Fn::GetAtt": [
      "CodePipelineServiceRole",
      "Arn"
     ]
    },
    "Stages": [
     {
      "Actions": [
       {
        "ActionTypeId": {
         "Category": "Source",
         "Owner": "AWS",
         "Provider": "CodeStarSourceConnection",
         "Version": "1"
        },
        "Configuration": {
         "BranchName": {
          "Ref": "GitBranch"
         },
         "ConnectionArn": {
          "Ref": "GitConnectionArn"
         },
         "FullRepositoryId": {
          "Ref": "GitRepositoryId"
         }
        },
        "Name": "BuildSourceAction",
        "OutputArtifacts": [
         {
          "Name": "SourceArtifact"
         }
        ],
        "RunOrder": 1
       }
      ],
      "Name": "Source"
     },
     {
      "Actions": [
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Fn::Join": [
           "",
           [
            {
             "Ref": "DeploymentId"
            },
            "-",
            {
             "Ref": "PipelineId"
            }
           ]
          ]
         }
        },
        "InputArtifacts": [
         {
          "Name": "SourceArtifact"
         }
        ],
        "Name": "BuildAction",
        "OutputArtifacts": [
         {
          "Name": "BuildArtifact"
         }
        ],
        "RunOrder": 1
       }
      ],
      "Name": "Build"
     },
     {
      "Fn::If": [
       "MANUAL_APPROVAL_SELECTED",
       {
        "Actions": [
         {
          "ActionTypeId": {
           "Category": "Approval",
           "Owner": "AWS",
           "Provider": "Manual",
           "Version": "1"
          },
          "Name": "ApprovalAction",
          "RunOrder": 1
         }
        ],
        "Name": "Approval"
       },
       {
        "Ref": "AWS::NoValue"
       }
      ]
     },
     {
      "Actions": [
       {
        "ActionTypeId": {
         "Category": "Deploy",
         "Owner": "AWS",
         "Provider": "S3",
         "Version": "1"
        },
        "Configuration": {
         "BucketName": {
          "Ref": "WebBucket"
         },
         "Extract": true
        },
        "InputArtifacts": [
         {
          "Name": "BuildArtifact"
         }
        ],
        "Name": "DeployAction",
        "RunOrder": 5
       }
      ],
      "Name": "Deploy"
     }
    ]
   },
   "Type": "AWS::CodePipeline::Pipeline"
  },
  "Project": {
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Description": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "DeploymentId"
       },
       "-",
       {
        "Ref": "PipelineId"
       },
       " build project"
      ]
     ]
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_MEDIUM",
     "EnvironmentVariables": [
      {
       "Name": "AWS_DEFAULT_REGION",
       "Value": {
        "Ref": "AWS::Region"
       }
      },
      {
       "Name": "REACT_APP_JSON",
       "Value": ""
      },
      {
       "Name": "REACT_APP_BACKEND_PROTOCOL",
       "Value": {
        "Fn::If": [
         "CUSTOM_API_PROTOCOL",
         {
          "Ref": "ApiProtocol"
         },
         {
          "Fn::ImportValue": {
           "Fn::Join": [
            "",
            [
             {
              "Ref": "DeploymentId"
             },
             "-ApiProtocol"
            ]
           ]
          }
         }
        ]
       }
      },
      {
       "Name": "REACT_APP_BACKEND_HOST",
       "Value": {
        "Fn::If": [
         "CUSTOM_API_HOST",
         {
          "Ref": "ApiHost"
         },
         {
          "Fn::ImportValue": {
           "Fn::Join": [
            "",
            [
             {
              "Ref": "DeploymentId"
             },
             "-ApiHost"
            ]
           ]
          }
         }
        ]
       }
      },
      {
       "Name": "REACT_APP_BACKEND_PATH",
       "Value": {
        "Fn::If": [
         "CUSTOM_API_STAGE",
         {
          "Ref": "ApiStage"
         },
         {
          "Fn::ImportValue": {
           "Fn::Join": [
            "",
            [
             {
              "Ref": "DeploymentId"
             },
             "-ApiStage"
            ]
           ]
          }
         }
        ]
       }
      },
      {
       "Name": "REACT_APP_AWS_PROJECT_REGION",
       "Value": {
        "Ref": "AWS::Region"
       }
      },
      {
       "Name": "REACT_APP_AWS_COGNITO_IDENTITY_POOL_ID",
       "Value": {
        "Fn::If": [
         "CUSTOM_IDENTITY_POOL_REF",
         {
          "Ref": "AuthIdentityPoolRef"
         },
         {
          "Fn::ImportValue": {
           "Fn::Join": [
            "",
            [
             {
              "Ref": "DeploymentId"
             },
             "-AuthIdentityPoolRef"
            ]
           ]
          }
         }
        ]
       }
      },
      {
       "Name": "REACT_APP_AWS_COGNITO_REGION",
       "Value": {
        "Ref": "AWS::Region"
       }
      },
      {
       "Name": "REACT_APP_AWS_USER_POOL_ID",
       "Value": {
        "Fn::If": [
         "CUSTOM_USER_POOL_REF",
         {
          "Ref": "AuthUserPoolRef"
         },
         {
          "Fn::ImportValue": {
           "Fn::Join": [
            "",
            [
             {
              "Ref": "DeploymentId"
             },
             "-AuthUserPoolRef"
            ]
           ]
          }
         }
        ]
       }
      },
      {
       "Name": "REACT_APP_AWS_USER_POOL_WEB_CLIENT_ID",
       "Value": {
        "Fn::If": [
         "CUSTOM_AUTH_WEB_CLIENT",
         {
          "Ref": "AuthUserPoolClientWebRef"
         },
         {
          "Fn::ImportValue": {
           "Fn::Join": [
            "",
            [
             {
              "Ref": "DeploymentId"
             },
             "-AuthUserPoolClientWebRef"
            ]
           ]
          }
         }
        ]
       }
      },
      {
       "Name": "BUILD_ENV_VARS_JSON",
       "Value": {
        "Ref": "BuildEnvVarsJson"
       }
      }
     ],
     "Image": "aws/codebuild/standard:7.0",
     "Type": "LINUX_CONTAINER"
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "DeploymentId"
       },
       "-",
       {
        "Ref": "PipelineId"
       }
      ]
     ]
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "CodeBuildServiceRole",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": {
      "Ref": "BuildspecPath"
     },
     "Type": "CODEPIPELINE"
    },
    "SourceVersion": {
     "Ref": "CommitID"
    },
    "TimeoutInMinutes": 15
   },
   "Type": "AWS::CodeBuild::Project"
  },
  "WebBucket": {
   "DeletionPolicy": "Retain",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": false,
     "BlockPublicPolicy": false,
     "IgnorePublicAcls": false,
     "RestrictPublicBuckets": false
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    },
    "WebsiteConfiguration": {
     "ErrorDocument": "index.html",
     "IndexDocument": "index.html"
    }
   },
   "Type": "AWS::S3::Bucket"
  },
  "WebBucketPolicy": {
   "Properties": {
    "Bucket": {
     "Ref": "WebBucket"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": "*",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "WebBucket",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Type": "AWS::S3::BucketPolicy"
  }
 }
}